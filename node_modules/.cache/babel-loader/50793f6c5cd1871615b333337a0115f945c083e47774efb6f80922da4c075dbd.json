{"ast":null,"code":"import _slicedToArray from \"C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport React__default from 'react';\nimport AutoplayButtonModuleCss from './index.module.css.js';\nimport { useAutoplay } from '../../modules/Autoplay.js';\nimport { IntervalState } from '../../modules/IntervalTimer.js';\nimport { composeCssClasses } from '../../utils/composeCssClasses.js';\nvar ButtonType;\n(function (ButtonType) {\n  ButtonType[\"PLAY\"] = \"play\";\n  ButtonType[\"PAUSE\"] = \"pause\";\n})(ButtonType || (ButtonType = {}));\nvar AutoplaySvg = /*#__PURE__*/function () {\n  function AutoplaySvg() {\n    _classCallCheck(this, AutoplaySvg);\n  }\n  _createClass(AutoplaySvg, null, [{\n    key: \"getPath\",\n    value: function getPath(buttonType) {\n      if (buttonType === ButtonType.PAUSE) return AutoplaySvg.pausePath;else return AutoplaySvg.playPath;\n    }\n  }]);\n  return AutoplaySvg;\n}();\nAutoplaySvg.playPath = 'M 12,26 18.5,22 18.5,14 12,10 z M 18.5,22 25,18 25,18 18.5,14 z';\nAutoplaySvg.pausePath = 'M 12,26 16,26 16,10 12,10 z M 21,26 25,26 25,10 21,10 z';\nfunction AutoplayButton(props) {\n  var className = props.className,\n    style = props.style,\n    _props$position = props.position,\n    position = _props$position === void 0 ? {\n      bottom: '0',\n      left: '0'\n    } : _props$position;\n  var _useAutoplay = useAutoplay(),\n    isPausedByUser = _useAutoplay.state.isPausedByUser,\n    autoplayState = _useAutoplay.autoplayState,\n    resume = _useAutoplay.resume,\n    pause = _useAutoplay.pause;\n  var _React__default$useSt = React__default.useState(autoplayState !== IntervalState.IDLE ? ButtonType.PAUSE : ButtonType.PLAY),\n    _React__default$useSt2 = _slicedToArray(_React__default$useSt, 2),\n    buttonType = _React__default$useSt2[0],\n    setButtonType = _React__default$useSt2[1];\n  var onClickHandler = function onClickHandler(event) {\n    event.stopPropagation();\n    if (isPausedByUser) resume();else pause();\n  };\n  React__default.useEffect(function () {\n    if (isPausedByUser && autoplayState === IntervalState.IDLE) setButtonType(ButtonType.PLAY);else if (isPausedByUser && autoplayState === IntervalState.PAUSED) setButtonType(ButtonType.PLAY);else setButtonType(ButtonType.PAUSE);\n  }, [isPausedByUser, autoplayState]);\n  return React__default.createElement(\"button\", {\n    className: composeCssClasses('hero-slider-autoplay-button', AutoplayButtonModuleCss.Button, className),\n    onClick: onClickHandler,\n    style: Object.assign(Object.assign({}, position), style)\n  }, React__default.createElement(\"svg\", {\n    fill: \"currentColor\",\n    height: \"100%\",\n    width: \"100%\",\n    viewBox: \"0 0 36 36\"\n  }, React__default.createElement(\"path\", {\n    d: AutoplaySvg.getPath(buttonType)\n  })));\n}\nAutoplayButton.displayName = 'hero-slider/autoplay-button';\nexport { AutoplayButton };","map":{"version":3,"mappings":";;;;;;;;AAOA,IAAKA,UAGJ;AAHD,WAAKA,UAAU;EACbA,2BAAa;EACbA,6BAAe;AACjB,CAAC,EAHIA,UAAU,KAAVA,UAAU,GAGd;AAAA,IA0BKC,WAAW;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAOR,iBAAeC,UAAsB;MAC1C,IAAIA,UAAU,KAAKF,UAAU,CAACG,KAAK,EAAE,OAAOF,WAAW,CAACG,SAAS,CAAC,KAC7D,OAAOH,WAAW,CAACI,QAAQ;;EACjC;EAAA;AAAA;AATaJ,WAAQ,YACpB,iEAA0E;AAE9DA,WAAS,aACrB,yDAAkE;AAQhE,SAAUK,cAAc,CAACC,KAA0B;EACvD,IACEC,SAAS,GAMPD,KAAK,CANPC,SAAS;IACTC,KAAK,GAKHF,KAAK,CALPE,KAAK;IAAA,kBAKHF,KAAK,CAJPG,QAAQ;IAARA,QAAQ,gCAAG;MACTC,MAAM,EAAE,GAAG;MACXC,IAAI,EAAE;KACP;EAGH,mBAKIC,WAAW,EAAE;IAJNC,cAAc,gBAAvBC,KAAK,CAAID,cAAc;IACvBE,aAAa,gBAAbA,aAAa;IACbC,MAAM,gBAANA,MAAM;IACNC,KAAK,gBAALA,KAAK;EAGP,4BAAoCC,cAAK,CAACC,QAAQ,CAChDJ,aAAa,KAAKK,aAAa,CAACC,IAAI,GAAGtB,UAAU,CAACG,KAAK,GAAGH,UAAU,CAACuB,IAAI,CAC1E;IAAA;IAFMrB,UAAU;IAAEsB,aAAa;EAIhC,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAClBC,KAAsD,EACpD;IACFA,KAAK,CAACC,eAAe,EAAE;IACvB,IAAIb,cAAc,EAAEG,MAAM,EAAE,CAAC,KACxBC,KAAK,EAAE;EACd,CAAC;EAEDC,cAAK,CAACS,SAAS,CAAC,YAAK;IACnB,IAAId,cAAc,IAAIE,aAAa,KAAKK,aAAa,CAACC,IAAI,EACxDE,aAAa,CAACxB,UAAU,CAACuB,IAAI,CAAC,CAAC,KAC5B,IAAIT,cAAc,IAAIE,aAAa,KAAKK,aAAa,CAACQ,MAAM,EAC/DL,aAAa,CAACxB,UAAU,CAACuB,IAAI,CAAC,CAAC,KAC5BC,aAAa,CAACxB,UAAU,CAACG,KAAK,CAAC;EACtC,CAAC,EAAE,CAACW,cAAc,EAAEE,aAAa,CAAC,CAAC;EAEnC,OACEG;IACEX,SAAS,EAAEsB,iBAAiB,CAC1B,6BAA6B,EAC7BC,uBAAuB,CAACC,MAAM,EAC9BxB,SAAS,CACV;IACDyB,OAAO,EAAER,cAAc;IACvBhB,KAAK,kCACAC,QAAQ,GACRD,KAAK;EAAA,GAGVU;IAAKe,IAAI,EAAC,cAAc;IAACC,MAAM,EAAC,MAAM;IAACC,KAAK,EAAC,MAAM;IAACC,OAAO,EAAC;EAAW,GACrElB;IAAMmB,CAAC,EAAErC,WAAW,CAACsC,OAAO,CAACrC,UAAU;EAAC,CAAI,EACxC,CACC;AAEb;AAECI,cAA0C,CAACkC,WAAW,GACrD,6BAA6B","names":["ButtonType","AutoplaySvg","buttonType","PAUSE","pausePath","playPath","AutoplayButton","props","className","style","position","bottom","left","useAutoplay","isPausedByUser","state","autoplayState","resume","pause","React","useState","IntervalState","IDLE","PLAY","setButtonType","onClickHandler","event","stopPropagation","useEffect","PAUSED","composeCssClasses","AutoplayButtonModuleCss","Button","onClick","fill","height","width","viewBox","d","getPath","displayName"],"sources":["C:\\Users\\Ibrahim\\Desktop\\Glob_az-CargoShippingCompany-main\\node_modules\\hero-slider\\src\\components\\AutoplayButton\\index.tsx"],"sourcesContent":["import React from 'react';\nimport AutoplayButtonModuleCss from './index.module.css';\nimport { NavPosition } from '../Nav';\nimport { useAutoplay } from '../../modules/Autoplay';\nimport { IntervalState } from '../../modules/IntervalTimer';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\n\nenum ButtonType {\n  PLAY = 'play',\n  PAUSE = 'pause'\n}\n\n/**\n * `AutoplayButton` component props.\n */\nexport interface AutoplayButtonProps {\n  /**\n   * CSS class name.\n   */\n  className?: React.HTMLAttributes<HTMLElement>['className'];\n  /**\n   * Object of CSS properties `top`, `left`, `bottom`, and `right` used to absolutely position elements.\n   * Aside from the former, you can also set the CSS `transform` property to help you center the element.\n   * @default\n   * {\n   *    bottom: '0',\n   *    left: '0'\n   * }\n   */\n  position?: NavPosition;\n  /**\n   * Inline CSS styling.\n   */\n  style?: React.CSSProperties;\n}\n\nclass AutoplaySvg {\n  public static playPath =\n    'M 12,26 18.5,22 18.5,14 12,10 z M 18.5,22 25,18 25,18 18.5,14 z' as const;\n\n  public static pausePath =\n    'M 12,26 16,26 16,10 12,10 z M 21,26 25,26 25,10 21,10 z' as const;\n\n  public static getPath(buttonType: ButtonType): string {\n    if (buttonType === ButtonType.PAUSE) return AutoplaySvg.pausePath;\n    else return AutoplaySvg.playPath;\n  }\n}\n\nexport function AutoplayButton(props: AutoplayButtonProps) {\n  const {\n    className,\n    style,\n    position = {\n      bottom: '0',\n      left: '0'\n    }\n  } = props;\n\n  const {\n    state: { isPausedByUser },\n    autoplayState,\n    resume,\n    pause\n  } = useAutoplay();\n\n  const [buttonType, setButtonType] = React.useState<ButtonType>(\n    autoplayState !== IntervalState.IDLE ? ButtonType.PAUSE : ButtonType.PLAY\n  );\n\n  const onClickHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.stopPropagation();\n    if (isPausedByUser) resume();\n    else pause();\n  };\n\n  React.useEffect(() => {\n    if (isPausedByUser && autoplayState === IntervalState.IDLE)\n      setButtonType(ButtonType.PLAY);\n    else if (isPausedByUser && autoplayState === IntervalState.PAUSED)\n      setButtonType(ButtonType.PLAY);\n    else setButtonType(ButtonType.PAUSE);\n  }, [isPausedByUser, autoplayState]);\n\n  return (\n    <button\n      className={composeCssClasses(\n        'hero-slider-autoplay-button',\n        AutoplayButtonModuleCss.Button,\n        className\n      )}\n      onClick={onClickHandler}\n      style={{\n        ...position,\n        ...style\n      }}\n    >\n      <svg fill=\"currentColor\" height=\"100%\" width=\"100%\" viewBox=\"0 0 36 36\">\n        <path d={AutoplaySvg.getPath(buttonType)} />\n      </svg>\n    </button>\n  );\n}\n\n(AutoplayButton as React.FunctionComponent).displayName =\n  'hero-slider/autoplay-button';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}