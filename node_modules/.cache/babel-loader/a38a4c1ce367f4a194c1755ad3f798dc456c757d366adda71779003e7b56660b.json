{"ast":null,"code":"import React__default from 'react';\nimport ButtonsNavModuleCss from './index.module.css.js';\nimport { Nav } from '../Nav/index.js';\nimport { useManager } from '../../modules/Manager.js';\nimport { useController } from '../../modules/Controller.js';\nimport { useLayout } from '../../modules/Layout.js';\nimport { composeCssClasses } from '../../utils/composeCssClasses.js';\nfunction ButtonsNav(props) {\n  var color = props.color,\n    activeColor = props.activeColor,\n    backgroundColor = props.backgroundColor,\n    _props$position = props.position,\n    position = _props$position === void 0 ? {\n      bottom: '0',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    } : _props$position,\n    justifyContent = props.justifyContent,\n    alignItems = props.alignItems,\n    componentMobileThreshold = props.mobileThreshold,\n    _props$isNullAfterThr = props.isNullAfterThreshold,\n    isNullAfterThreshold = _props$isNullAfterThr === void 0 ? false : _props$isNullAfterThr,\n    extraButton = props.extraButton,\n    isExtraButtonRight = props.isExtraButtonRight;\n  var _useLayout = useLayout(),\n    width = _useLayout.state.width,\n    mobileThreshold = _useLayout.mobileThreshold;\n  var _useManager = useManager(),\n    _useManager$state = _useManager.state,\n    slides = _useManager$state.slides,\n    totalSlides = _useManager$state.totalSlides;\n  var _useController = useController(),\n    activeSlide = _useController.state.activeSlide,\n    changeSlide = _useController.changeSlide;\n  /**\n   * CSS variables for the transitions.\n   */\n  var CSSVariables = {\n    '--nav-color': color,\n    '--nav-background-color': backgroundColor,\n    '--nav-active-color': activeColor\n  };\n  if (Number(width) <= (componentMobileThreshold !== null && componentMobileThreshold !== void 0 ? componentMobileThreshold : mobileThreshold)) {\n    if (isNullAfterThreshold) return null;\n    return React__default.createElement(Nav, Object.assign({}, props));\n  }\n  function renderButtons() {\n    if (!totalSlides) return [];\n    var onClickHandler = function onClickHandler(slideNumber) {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n    return Array.from(slides.values()).map(function (_ref) {\n      var number = _ref.number,\n        label = _ref.label;\n      var description = label;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n        React__default.createElement(\"li\", {\n          key: number,\n          className: composeCssClasses('hero-slider-buttons-nav-button', ButtonsNavModuleCss.Button, {\n            className: ButtonsNavModuleCss.Active,\n            useIf: activeSlide === number\n          }),\n          onClick: function onClick() {\n            return onClickHandler(number);\n          }\n        }, React__default.createElement(\"div\", {\n          className: composeCssClasses('hero-slider-buttons-nav-button-description', ButtonsNavModuleCss.Description)\n        }, React__default.createElement(\"div\", {\n          className: composeCssClasses('hero-slider-buttons-nav-button-text', ButtonsNavModuleCss.Text)\n        }, description)))\n      );\n    });\n  }\n  return React__default.createElement(\"div\", {\n    className: composeCssClasses('hero-slider-buttons-nav-wrapper', ButtonsNavModuleCss.Wrapper),\n    style: Object.assign(Object.assign({}, position), CSSVariables)\n  }, React__default.createElement(\"ul\", {\n    className: composeCssClasses('hero-slider-buttons-nav-container', ButtonsNavModuleCss.Container),\n    style: {\n      justifyContent: justifyContent || 'center',\n      /**\n       * The **vertical alignment** of the buttons can be set manually.\n       * If it's undefined and if there is a position top passed as prop,\n       * then `alignItems` will be `flex-start`. Otherwise,\n       * it is set as `flex-end`.\n       */\n      alignItems: alignItems || (position.top !== undefined ? 'flex-start' : 'flex-end')\n    }\n  }, renderButtons(), extraButton && React__default.createElement(\"div\", {\n    className: composeCssClasses('hero-slider-buttons-nav-extra-button', ButtonsNavModuleCss.ExtraButton),\n    style: {\n      order: isExtraButtonRight ? 1 : 0\n    }\n  }, extraButton)));\n}\nButtonsNav.displayName = 'hero-slider/buttons-nav';\nexport { ButtonsNav };","map":{"version":3,"mappings":"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","names":["ButtonsNav","props","color","activeColor","backgroundColor","position","bottom","left","transform","justifyContent","alignItems","componentMobileThreshold","mobileThreshold","isNullAfterThreshold","extraButton","isExtraButtonRight","useLayout","width","state","useManager","slides","totalSlides","useController","activeSlide","changeSlide","CSSVariables","Number","React","Object","renderButtons","onClickHandler","slideNumber","Array","from","values","map","number","label","description","key","className","composeCssClasses","ButtonsNavModuleCss","Button","Active","useIf","onClick","Description","Text","Wrapper","style","Container","top","undefined","ExtraButton","order","displayName"],"sources":["C:\\Users\\Ibrahim\\Desktop\\Glob_az-CargoShippingCompany-main\\node_modules\\hero-slider\\src\\components\\ButtonsNav\\index.tsx"],"sourcesContent":["import React from 'react';\nimport ButtonsNavModuleCss from './index.module.css';\nimport { Nav } from '../Nav';\nimport { MenuNavProps } from '../MenuNav';\nimport { useManager } from '../../modules/Manager';\nimport { useController } from '../../modules/Controller';\nimport { useLayout } from '../../modules/Layout';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\n\n/**\n * `ButtonsNav` component props.\n */\nexport interface ButtonsNavProps extends MenuNavProps {\n  /**\n   * CSS background color property for the nav buttons.\n   */\n  backgroundColor?: React.CSSProperties['backgroundColor'];\n  /**\n   * Aligns the nav items to the center, top, or bottom of its container working exactly as how the CSS flex-box `align-items` property works.\n   */\n  alignItems?: React.CSSProperties['alignItems'];\n}\n\nexport function ButtonsNav(props: ButtonsNavProps) {\n  const {\n    color,\n    activeColor,\n    backgroundColor,\n    position = {\n      bottom: '0',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    justifyContent,\n    alignItems,\n    mobileThreshold: componentMobileThreshold,\n    isNullAfterThreshold = false,\n    extraButton,\n    isExtraButtonRight\n  } = props;\n\n  const {\n    state: { width },\n    mobileThreshold\n  } = useLayout();\n\n  const {\n    state: { slides, totalSlides }\n  } = useManager();\n\n  const {\n    state: { activeSlide },\n    changeSlide\n  } = useController();\n\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-background-color': backgroundColor,\n    '--nav-active-color': activeColor\n  };\n\n  if (Number(width) <= (componentMobileThreshold ?? mobileThreshold)) {\n    if (isNullAfterThreshold) return null;\n    return <Nav {...props} />;\n  }\n\n  function renderButtons() {\n    if (!totalSlides) return [];\n\n    const onClickHandler = (slideNumber: number) => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n\n    return Array.from(slides.values()).map(({ number, label }) => {\n      const description = label;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n        <li\n          key={number}\n          className={composeCssClasses(\n            'hero-slider-buttons-nav-button',\n            ButtonsNavModuleCss.Button,\n            {\n              className: ButtonsNavModuleCss.Active,\n              useIf: activeSlide === number\n            }\n          )}\n          onClick={() => onClickHandler(number)}\n        >\n          <div\n            className={composeCssClasses(\n              'hero-slider-buttons-nav-button-description',\n              ButtonsNavModuleCss.Description\n            )}\n          >\n            <div\n              className={composeCssClasses(\n                'hero-slider-buttons-nav-button-text',\n                ButtonsNavModuleCss.Text\n              )}\n            >\n              {description}\n            </div>\n          </div>\n        </li>\n      );\n    });\n  }\n\n  return (\n    <div\n      className={composeCssClasses(\n        'hero-slider-buttons-nav-wrapper',\n        ButtonsNavModuleCss.Wrapper\n      )}\n      style={{\n        ...position,\n        ...CSSVariables\n      }}\n    >\n      <ul\n        className={composeCssClasses(\n          'hero-slider-buttons-nav-container',\n          ButtonsNavModuleCss.Container\n        )}\n        style={{\n          justifyContent: justifyContent || 'center',\n          /**\n           * The **vertical alignment** of the buttons can be set manually.\n           * If it's undefined and if there is a position top passed as prop,\n           * then `alignItems` will be `flex-start`. Otherwise,\n           * it is set as `flex-end`.\n           */\n          alignItems:\n            alignItems ||\n            (position.top !== undefined ? 'flex-start' : 'flex-end')\n        }}\n      >\n        {renderButtons()}\n        {extraButton && (\n          <div\n            className={composeCssClasses(\n              'hero-slider-buttons-nav-extra-button',\n              ButtonsNavModuleCss.ExtraButton\n            )}\n            style={{\n              order: isExtraButtonRight ? 1 : 0\n            }}\n          >\n            {extraButton}\n          </div>\n        )}\n      </ul>\n    </div>\n  );\n}\n\n(ButtonsNav as React.FunctionComponent).displayName = 'hero-slider/buttons-nav';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}