{"ast":null,"code":"import _slicedToArray from \"C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return \"\".concat(key, \"_\").concat(key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\nfunction observe(element, callback) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n    id = _createObserver.id,\n    observer = _createObserver.observer,\n    elements = _createObserver.elements; // Register the callback listener for this element\n\n  var callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    threshold = _ref.threshold,\n    delay = _ref.delay,\n    trackVisibility = _ref.trackVisibility,\n    rootMargin = _ref.rootMargin,\n    root = _ref.root,\n    triggerOnce = _ref.triggerOnce,\n    skip = _ref.skip,\n    initialInView = _ref.initialInView,\n    fallbackInView = _ref.fallbackInView,\n    onChange = _ref.onChange;\n  var _state$entry;\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    ref = _React$useState2[0],\n    setRef = _React$useState2[1];\n  var callback = React.useRef();\n  var _React$useState3 = React.useState({\n      inView: !!initialInView,\n      entry: undefined\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    state = _React$useState4[0],\n    setState = _React$useState4[1]; // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n  callback.current = onChange;\n  React.useEffect(function () {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    var unobserve = observe(ref, function (inView, entry) {\n      setState({\n        inView: inView,\n        entry: entry\n      });\n      if (callback.current) callback.current(inView, entry);\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root: root,\n      rootMargin: rootMargin,\n      threshold: threshold,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n    return function () {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  var entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  React.useEffect(function () {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { observe, useInView };","map":{"version":3,"mappings":";;AAmCA,IAAMA,WAAW,GAAG,IAAIC,GAAG,EAAE;AAC7B,IAAMC,OAAO,GAAG,IAAIC,OAAO,EAAE;AAC7B,IAAIC,MAAM,GAAG,CAAC;AACd,IAAIC,gBAAgB,GAAGC,SAAS;AAWhC;AACA;AACA;AACA;;AAEA,SAASC,SAAS,CAACC,IAAI,EAAE;EACvB,IAAI,CAACA,IAAI,EAAE,OAAO,GAAG;EACrB,IAAIN,OAAO,CAACO,GAAG,CAACD,IAAI,CAAC,EAAE,OAAON,OAAO,CAACQ,GAAG,CAACF,IAAI,CAAC;EAC/CJ,MAAM,IAAI,CAAC;EACXF,OAAO,CAACS,GAAG,CAACH,IAAI,EAAEJ,MAAM,CAACQ,QAAQ,EAAE,CAAC;EACpC,OAAOV,OAAO,CAACQ,GAAG,CAACF,IAAI,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASK,WAAW,CAACC,OAAO,EAAE;EAC5B,OAAOC,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAACG,IAAI,EAAE,CAACC,MAAM,CAAC,aAAG;IAAA,OAAIJ,OAAO,CAACK,GAAG,CAAC,KAAKb,SAAS;EAAA,EAAC,CAACc,GAAG,CAAC,aAAG,EAAI;IACtF,iBAAUD,GAAG,cAAIA,GAAG,KAAK,MAAM,GAAGZ,SAAS,CAACO,OAAO,CAACN,IAAI,CAAC,GAAGM,OAAO,CAACK,GAAG,CAAC;EAC5E,CAAG,CAAC,CAACP,QAAQ,EAAE;AACf;AAEA,SAASS,cAAc,CAACP,OAAO,EAAE;EACjC;EACE,IAAIQ,EAAE,GAAGT,WAAW,CAACC,OAAO,CAAC;EAC7B,IAAIS,QAAQ,GAAGvB,WAAW,CAACU,GAAG,CAACY,EAAE,CAAC;EAElC,IAAI,CAACC,QAAQ,EAAE;IACjB;IACI,IAAMC,QAAQ,GAAG,IAAIvB,GAAG,EAAE;IAC1B,IAAIwB,UAAU;IACd,IAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAC,iBAAO,EAAI;MACnDC,OAAO,CAACC,OAAO,CAAC,eAAK,EAAI;QACvB,IAAIC,aAAa;;QAEzB;QACA;QACQ,IAAMC,MAAM,GAAGC,KAAK,CAACC,cAAc,IAAIR,UAAU,CAACS,IAAI,CAAC,mBAAS;UAAA,OAAIF,KAAK,CAACG,iBAAiB,IAAIC,SAAS;QAAA,EAAC,CAAC;;QAE1G,IAAItB,OAAO,CAACuB,eAAe,IAAI,OAAOL,KAAK,CAACM,SAAS,KAAK,WAAW,EAAE;UAC/E;UACA;UACUN,KAAK,CAACM,SAAS,GAAGP,MAAM;QAClC;QAEQ,CAACD,aAAa,GAAGN,QAAQ,CAACd,GAAG,CAACsB,KAAK,CAACO,MAAM,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGT,aAAa,CAACD,OAAO,CAAC,kBAAQ,EAAI;UAChGW,QAAQ,CAACT,MAAM,EAAEC,KAAK,CAAC;QACjC,CAAS,CAAC;MACV,CAAO,CAAC;IACR,CAAK,EAAElB,OAAO,CAAC,CAAC;;IAEZW,UAAU,GAAGC,QAAQ,CAACD,UAAU,KAAKgB,KAAK,CAACC,OAAO,CAAC5B,OAAO,CAACsB,SAAS,CAAC,GAAGtB,OAAO,CAACsB,SAAS,GAAG,CAACtB,OAAO,CAACsB,SAAS,IAAI,CAAC,CAAC,CAAC;IACrHb,QAAQ,GAAG;MACTD,EAAE,EAAFA,EAAE;MACFI,QAAQ,EAARA,QAAQ;MACRF,QAAQ,EAARA;IACN,CAAK;IACDxB,WAAW,CAACW,GAAG,CAACW,EAAE,EAAEC,QAAQ,CAAC;EACjC;EAEE,OAAOA,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASoB,OAAO,CAACC,OAAO,EAAEJ,QAAQ,EAAmD;EAAA,IAAjD1B,OAAO,uEAAG,EAAE;EAAA,IAAE+B,cAAc,uEAAGxC,gBAAgB;EACjF,IAAI,OAAOyC,MAAM,CAACnB,oBAAoB,KAAK,WAAW,IAAIkB,cAAc,KAAKvC,SAAS,EAAE;IACtF,IAAMyC,MAAM,GAAGH,OAAO,CAACI,qBAAqB,EAAE;IAC9CR,QAAQ,CAACK,cAAc,EAAE;MACvBZ,cAAc,EAAEY,cAAc;MAC9BN,MAAM,EAAEK,OAAO;MACfT,iBAAiB,EAAE,OAAOrB,OAAO,CAACsB,SAAS,KAAK,QAAQ,GAAGtB,OAAO,CAACsB,SAAS,GAAG,CAAC;MAChFa,IAAI,EAAE,CAAC;MACPC,kBAAkB,EAAEH,MAAM;MAC1BI,gBAAgB,EAAEJ,MAAM;MACxBK,UAAU,EAAEL;IAClB,CAAK,CAAC;IACF,OAAO,YAAM;IAAA,CACZ;EACL,CAAG;;EAGD,sBAII1B,cAAc,CAACP,OAAO,CAAC;IAHzBQ,EAAE,mBAAFA,EAAE;IACFI,QAAQ,mBAARA,QAAQ;IACRF,QAAQ,mBAARA,QAAQ,CACkB;;EAE5B,IAAI6B,SAAS,GAAG7B,QAAQ,CAACd,GAAG,CAACkC,OAAO,CAAC,IAAI,EAAE;EAE3C,IAAI,CAACpB,QAAQ,CAACf,GAAG,CAACmC,OAAO,CAAC,EAAE;IAC1BpB,QAAQ,CAACb,GAAG,CAACiC,OAAO,EAAES,SAAS,CAAC;EACpC;EAEEA,SAAS,CAACC,IAAI,CAACd,QAAQ,CAAC;EACxBd,QAAQ,CAACiB,OAAO,CAACC,OAAO,CAAC;EACzB,OAAO,SAASW,SAAS,GAAG;IAC9B;IACIF,SAAS,CAACG,MAAM,CAACH,SAAS,CAACI,OAAO,CAACjB,QAAQ,CAAC,EAAE,CAAC,CAAC;IAEhD,IAAIa,SAAS,CAACK,MAAM,KAAK,CAAC,EAAE;MAChC;MACMlC,QAAQ,CAACmC,MAAM,CAACf,OAAO,CAAC;MACxBlB,QAAQ,CAAC6B,SAAS,CAACX,OAAO,CAAC;IACjC;IAEI,IAAIpB,QAAQ,CAACoC,IAAI,KAAK,CAAC,EAAE;MAC7B;MACMlC,QAAQ,CAACmC,UAAU,EAAE;MACrB7D,WAAW,CAAC2D,MAAM,CAACrC,EAAE,CAAC;IAC5B;EACA,CAAG;AACH;;AAkLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASwC,SAAS,GAWV;EAAA,+EAAJ,EAAE;IAVJ1B,SAAS,QAATA,SAAS;IACT2B,KAAK,QAALA,KAAK;IACL1B,eAAe,QAAfA,eAAe;IACf2B,UAAU,QAAVA,UAAU;IACVxD,IAAI,QAAJA,IAAI;IACJyD,WAAW,QAAXA,WAAW;IACXC,IAAI,QAAJA,IAAI;IACJC,aAAa,QAAbA,aAAa;IACbtB,cAAc,QAAdA,cAAc;IACduB,QAAQ,QAARA,QAAQ;EAER,IAAIC,YAAY;EAEhB,sBAAsBC,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAnCC,GAAG;IAAEC,MAAM;EAClB,IAAMjC,QAAQ,GAAG8B,KAAK,CAACI,MAAM,EAAE;EAC/B,uBAA0BJ,KAAK,CAACC,QAAQ,CAAC;MACvCxC,MAAM,EAAE,CAAC,CAACoC,aAAa;MACvBnC,KAAK,EAAE1B;IACX,CAAG,CAAC;IAAA;IAHKqE,KAAK;IAAEC,QAAQ,uBAGnB;EACL;;EAEEpC,QAAQ,CAACqC,OAAO,GAAGT,QAAQ;EAC3BE,KAAK,CAACQ,SAAS,CAAC,YAAM;IACxB;IACI,IAAIZ,IAAI,IAAI,CAACM,GAAG,EAAE;IAClB,IAAIjB,SAAS,GAAGZ,OAAO,CAAC6B,GAAG,EAAE,UAACzC,MAAM,EAAEC,KAAK,EAAK;MAC9C4C,QAAQ,CAAC;QACP7C,MAAM,EAANA,MAAM;QACNC,KAAK,EAALA;MACR,CAAO,CAAC;MACF,IAAIQ,QAAQ,CAACqC,OAAO,EAAErC,QAAQ,CAACqC,OAAO,CAAC9C,MAAM,EAAEC,KAAK,CAAC;MAErD,IAAIA,KAAK,CAACC,cAAc,IAAIgC,WAAW,IAAIV,SAAS,EAAE;QAC5D;QACQA,SAAS,EAAE;QACXA,SAAS,GAAGjD,SAAS;MAC7B;IACA,CAAK,EAAE;MACDE,IAAI,EAAJA,IAAI;MACJwD,UAAU,EAAVA,UAAU;MACV5B,SAAS,EAATA,SAAS;MACf;MACMC,eAAe,EAAfA,eAAe;MACrB;MACM0B,KAAK,EAALA;IACN,CAAK,EAAElB,cAAc,CAAC;IAClB,OAAO,YAAM;MACX,IAAIU,SAAS,EAAE;QACbA,SAAS,EAAE;MACnB;IACA,CAAK;EACL,CAAG;EAAA;EACH;EACE;EAAA;EACF;EACEd,KAAK,CAACC,OAAO,CAACN,SAAS,CAAC,GAAGA,SAAS,CAACxB,QAAQ,EAAE,GAAGwB,SAAS,EAAEoC,GAAG,EAAEhE,IAAI,EAAEwD,UAAU,EAAEC,WAAW,EAAEC,IAAI,EAAE7B,eAAe,EAAEQ,cAAc,EAAEkB,KAAK,CAAC,CAAC;EAC/I,IAAMgB,WAAW,GAAG,CAACV,YAAY,GAAGM,KAAK,CAAC3C,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGqC,YAAY,CAAC9B,MAAM;EACvF+B,KAAK,CAACQ,SAAS,CAAC,YAAM;IACpB,IAAI,CAACN,GAAG,IAAIO,WAAW,IAAI,CAACd,WAAW,IAAI,CAACC,IAAI,EAAE;MACtD;MACA;MACMU,QAAQ,CAAC;QACP7C,MAAM,EAAE,CAAC,CAACoC,aAAa;QACvBnC,KAAK,EAAE1B;MACf,CAAO,CAAC;IACR;EACA,CAAG,EAAE,CAACkE,GAAG,EAAEO,WAAW,EAAEd,WAAW,EAAEC,IAAI,EAAEC,aAAa,CAAC,CAAC;EACxD,IAAMa,MAAM,GAAG,CAACP,MAAM,EAAEE,KAAK,CAAC5C,MAAM,EAAE4C,KAAK,CAAC3C,KAAK,CAAC,CAAC;;EAEnDgD,MAAM,CAACR,GAAG,GAAGQ,MAAM,CAAC,CAAC,CAAC;EACtBA,MAAM,CAACjD,MAAM,GAAGiD,MAAM,CAAC,CAAC,CAAC;EACzBA,MAAM,CAAChD,KAAK,GAAGgD,MAAM,CAAC,CAAC,CAAC;EACxB,OAAOA,MAAM;AACf","names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","_elements$get","inView","entry","isIntersecting","some","intersectionRatio","threshold","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","length","delete","size","disconnect","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","_state$entry","React","useState","ref","setRef","useRef","state","setState","current","useEffect","entryTarget","result"],"sources":["C:\\Users\\Ibrahim\\Desktop\\Glob_az-CargoShippingCompany-main\\node_modules\\.pnpm\\react-intersection-observer@9.4.0_react@18.2.0\\node_modules\\react-intersection-observer\\react-intersection-observer.modern.mjs"],"sourcesContent":["import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  var _state$entry;\n\n  const [ref, setRef] = React.useState(null);\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView,\n    entry: undefined\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n  callback.current = onChange;\n  React.useEffect(() => {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    let unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}