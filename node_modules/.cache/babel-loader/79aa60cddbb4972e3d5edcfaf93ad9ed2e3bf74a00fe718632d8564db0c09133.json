{"ast":null,"code":"export function Calculate(length, width, height, physicalWeight, unitWeight, country) {\n  let lastResult = 0;\n  let volumetricWeight = 0;\n  // kg\n  if (unitWeight === 'kg' && country === 'Türkiyə') {\n    volumetricWeight = length * width * height / 6000;\n    if (physicalWeight <= 0.1 && physicalWeight > 0.001) {\n      lastResult = 0.7;\n    }\n    if (physicalWeight <= 0.25 && physicalWeight > 0.1) {\n      lastResult = 1.95;\n    }\n    if (physicalWeight <= 0.5 && physicalWeight > 0.25) {\n      lastResult = 2.95;\n    }\n    if (physicalWeight <= 0.75 && physicalWeight > 0.5) {\n      lastResult = 3.5;\n    }\n    if (physicalWeight <= 1 && physicalWeight > 0.75) {\n      lastResult = 3.9;\n    }\n    if (physicalWeight > 1) {\n      lastResult = 3.5;\n    }\n  }\n  // g\n  if (unitWeight === 'g' && country === 'Türkiyə') {\n    volumetricWeight = length * width * height / 6;\n    if (physicalWeight <= 100 && physicalWeight > 1) {\n      lastResult = 0.7;\n    }\n    if (physicalWeight <= 250 && physicalWeight > 100) {\n      lastResult = 1.95;\n    }\n    if (physicalWeight <= 500 && physicalWeight > 250) {\n      lastResult = 2.95;\n    }\n    if (physicalWeight <= 750 && physicalWeight > 500) {\n      lastResult = 3.5;\n    }\n    if (physicalWeight <= 1000 && physicalWeight > 750) {\n      lastResult = 3.9;\n    }\n    if (physicalWeight > 1000) {\n      lastResult = 3.5;\n    }\n  }\n  if (length >= 60 && width >= 60 || length >= 60 && height >= 60 || width >= 60 && height >= 60) {\n    if (volumetricWeight > physicalWeight) {\n      lastResult = volumetricWeight / 100;\n    } else {\n      lastResult = physicalWeight / 100;\n    }\n  }\n  return lastResult;\n}\n_c = Calculate;\nvar _c;\n$RefreshReg$(_c, \"Calculate\");","map":{"version":3,"names":["Calculate","length","width","height","physicalWeight","unitWeight","country","lastResult","volumetricWeight"],"sources":["C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/src/pages/HomePage/components/Calculator/Calculate.ts"],"sourcesContent":["export function Calculate(\n  length: number,\n  width: number,\n  height: number,\n  physicalWeight: number,\n  unitWeight: string,\n  country: string,\n) {\n  let lastResult = 0;\n  let volumetricWeight = 0;\n  // kg\n  if (unitWeight === 'kg' && country === 'Türkiyə') {\n    volumetricWeight = (length * width * height) / 6000;\n\n    if (physicalWeight <= 0.1 && physicalWeight > 0.001) {\n      lastResult = 0.7;\n    }\n    if (physicalWeight <= 0.25 && physicalWeight > 0.1) {\n      lastResult = 1.95;\n    }\n\n    if (physicalWeight <= 0.5 && physicalWeight > 0.25) {\n      lastResult = 2.95;\n    }\n\n    if (physicalWeight <= 0.75 && physicalWeight > 0.5) {\n      lastResult = 3.5;\n    }\n    if (physicalWeight <= 1 && physicalWeight > 0.75) {\n      lastResult = 3.9;\n    }\n\n    if (physicalWeight > 1) {\n      lastResult = 3.5;\n    }\n  }\n  // g\n  if (unitWeight === 'g' && country === 'Türkiyə') {\n    volumetricWeight = (length * width * height) / 6;\n\n    if (physicalWeight <= 100 && physicalWeight > 1) {\n      lastResult = 0.7;\n    }\n\n    if (physicalWeight <= 250 && physicalWeight > 100) {\n      lastResult = 1.95;\n    }\n\n    if (physicalWeight <= 500 && physicalWeight > 250) {\n      lastResult = 2.95;\n    }\n\n    if (physicalWeight <= 750 && physicalWeight > 500) {\n      lastResult = 3.5;\n    }\n    if (physicalWeight <= 1000 && physicalWeight > 750) {\n      lastResult = 3.9;\n    }\n\n    if (physicalWeight > 1000) {\n      lastResult = 3.5;\n    }\n  }\n\n  if ((length >= 60 && width >= 60) || (length >= 60 && height >= 60) || (width >= 60 && height >= 60)) {\n    if (volumetricWeight > physicalWeight) {\n      lastResult = volumetricWeight / 100;\n    } else {\n      lastResult = physicalWeight / 100;\n    }\n  }\n  return lastResult;\n}\n"],"mappings":"AAAA,OAAO,SAASA,SAAS,CACvBC,MAAc,EACdC,KAAa,EACbC,MAAc,EACdC,cAAsB,EACtBC,UAAkB,EAClBC,OAAe,EACf;EACA,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,gBAAgB,GAAG,CAAC;EACxB;EACA,IAAIH,UAAU,KAAK,IAAI,IAAIC,OAAO,KAAK,SAAS,EAAE;IAChDE,gBAAgB,GAAIP,MAAM,GAAGC,KAAK,GAAGC,MAAM,GAAI,IAAI;IAEnD,IAAIC,cAAc,IAAI,GAAG,IAAIA,cAAc,GAAG,KAAK,EAAE;MACnDG,UAAU,GAAG,GAAG;IAClB;IACA,IAAIH,cAAc,IAAI,IAAI,IAAIA,cAAc,GAAG,GAAG,EAAE;MAClDG,UAAU,GAAG,IAAI;IACnB;IAEA,IAAIH,cAAc,IAAI,GAAG,IAAIA,cAAc,GAAG,IAAI,EAAE;MAClDG,UAAU,GAAG,IAAI;IACnB;IAEA,IAAIH,cAAc,IAAI,IAAI,IAAIA,cAAc,GAAG,GAAG,EAAE;MAClDG,UAAU,GAAG,GAAG;IAClB;IACA,IAAIH,cAAc,IAAI,CAAC,IAAIA,cAAc,GAAG,IAAI,EAAE;MAChDG,UAAU,GAAG,GAAG;IAClB;IAEA,IAAIH,cAAc,GAAG,CAAC,EAAE;MACtBG,UAAU,GAAG,GAAG;IAClB;EACF;EACA;EACA,IAAIF,UAAU,KAAK,GAAG,IAAIC,OAAO,KAAK,SAAS,EAAE;IAC/CE,gBAAgB,GAAIP,MAAM,GAAGC,KAAK,GAAGC,MAAM,GAAI,CAAC;IAEhD,IAAIC,cAAc,IAAI,GAAG,IAAIA,cAAc,GAAG,CAAC,EAAE;MAC/CG,UAAU,GAAG,GAAG;IAClB;IAEA,IAAIH,cAAc,IAAI,GAAG,IAAIA,cAAc,GAAG,GAAG,EAAE;MACjDG,UAAU,GAAG,IAAI;IACnB;IAEA,IAAIH,cAAc,IAAI,GAAG,IAAIA,cAAc,GAAG,GAAG,EAAE;MACjDG,UAAU,GAAG,IAAI;IACnB;IAEA,IAAIH,cAAc,IAAI,GAAG,IAAIA,cAAc,GAAG,GAAG,EAAE;MACjDG,UAAU,GAAG,GAAG;IAClB;IACA,IAAIH,cAAc,IAAI,IAAI,IAAIA,cAAc,GAAG,GAAG,EAAE;MAClDG,UAAU,GAAG,GAAG;IAClB;IAEA,IAAIH,cAAc,GAAG,IAAI,EAAE;MACzBG,UAAU,GAAG,GAAG;IAClB;EACF;EAEA,IAAKN,MAAM,IAAI,EAAE,IAAIC,KAAK,IAAI,EAAE,IAAMD,MAAM,IAAI,EAAE,IAAIE,MAAM,IAAI,EAAG,IAAKD,KAAK,IAAI,EAAE,IAAIC,MAAM,IAAI,EAAG,EAAE;IACpG,IAAIK,gBAAgB,GAAGJ,cAAc,EAAE;MACrCG,UAAU,GAAGC,gBAAgB,GAAG,GAAG;IACrC,CAAC,MAAM;MACLD,UAAU,GAAGH,cAAc,GAAG,GAAG;IACnC;EACF;EACA,OAAOG,UAAU;AACnB;AAAC,KAxEeP,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}