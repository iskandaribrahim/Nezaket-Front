{"ast":null,"code":"import React__default from 'react';\nimport MenuNavModuleCss from './index.module.css.js';\nimport { Nav } from '../Nav/index.js';\nimport { useLayout } from '../../modules/Layout.js';\nimport { useManager } from '../../modules/Manager.js';\nimport { useController } from '../../modules/Controller.js';\nimport { composeCssClasses } from '../../utils/composeCssClasses.js';\nfunction MenuNav(props) {\n  var color = props.color,\n    activeColor = props.activeColor,\n    _props$position = props.position,\n    position = _props$position === void 0 ? {\n      bottom: '0',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    } : _props$position,\n    _props$justifyContent = props.justifyContent,\n    justifyContent = _props$justifyContent === void 0 ? 'center' : _props$justifyContent,\n    componentMobileThreshold = props.mobileThreshold,\n    isNullAfterThreshold = props.isNullAfterThreshold,\n    extraButton = props.extraButton,\n    _props$isExtraButtonR = props.isExtraButtonRight,\n    isExtraButtonRight = _props$isExtraButtonR === void 0 ? true : _props$isExtraButtonR;\n  var _useLayout = useLayout(),\n    width = _useLayout.state.width,\n    mobileThreshold = _useLayout.mobileThreshold;\n  var _useManager = useManager(),\n    _useManager$state = _useManager.state,\n    slides = _useManager$state.slides,\n    totalSlides = _useManager$state.totalSlides;\n  var _useController = useController(),\n    activeSlide = _useController.state.activeSlide,\n    changeSlide = _useController.changeSlide;\n  if (Number(width) <= (componentMobileThreshold !== null && componentMobileThreshold !== void 0 ? componentMobileThreshold : mobileThreshold)) {\n    if (isNullAfterThreshold) return null;\n    return React__default.createElement(Nav, Object.assign({}, props));\n  }\n  function renderButtons() {\n    if (!totalSlides) return [];\n    var onClickHandler = function onClickHandler(slideNumber) {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n    return Array.from(slides.values()).map(function (_ref, index) {\n      var label = _ref.label,\n        number = _ref.number;\n      var description = label;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n        React__default.createElement(\"li\", {\n          key: index,\n          className: composeCssClasses('hero-slider-menu-nav-button', MenuNavModuleCss.Button, {\n            className: MenuNavModuleCss.Active,\n            useIf: activeSlide === number\n          }),\n          onClick: function onClick() {\n            return onClickHandler(number);\n          }\n        }, React__default.createElement(\"div\", {\n          className: composeCssClasses('hero-slider-menu-nav-button-description', MenuNavModuleCss.Description)\n        }, React__default.createElement(\"div\", {\n          className: composeCssClasses('hero-slider-menu-nav-button-number', MenuNavModuleCss.Number)\n        }, number, React__default.createElement(\"span\", {\n          className: composeCssClasses('hero-slider-menu-nav-button-square', MenuNavModuleCss.Square)\n        })), React__default.createElement(\"div\", {\n          className: composeCssClasses('hero-slider-menu-nav-button-text', MenuNavModuleCss.Text)\n        }, description)))\n      );\n    });\n  }\n  /**\n   * CSS variables for the transitions.\n   */\n  var CSSVariables = {\n    '--nav-color': color,\n    '--nav-active-color': activeColor\n  };\n  return React__default.createElement(\"div\", {\n    className: composeCssClasses('hero-slider-menu-nav-wrapper', MenuNavModuleCss.Wrapper),\n    style: Object.assign(Object.assign(Object.assign({}, position), CSSVariables), {\n      justifyContent: justifyContent\n    })\n  }, extraButton && React__default.createElement(\"div\", {\n    className: composeCssClasses('hero-slider-menu-nav-extra', MenuNavModuleCss.Extra),\n    style: {\n      order: isExtraButtonRight ? 1 : 0\n    }\n  }, React__default.createElement(\"span\", {\n    className: composeCssClasses('hero-slider-menu-nav-extra-button', MenuNavModuleCss.ExtraButton),\n    style: {\n      borderLeft: isExtraButtonRight ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))' : undefined,\n      borderRight: !isExtraButtonRight ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))' : undefined\n    }\n  }, extraButton)), React__default.createElement(\"ul\", {\n    className: composeCssClasses('hero-slider-menu-nav-container', MenuNavModuleCss.Container)\n  }, renderButtons(), React__default.createElement(\"span\", {\n    className: composeCssClasses('hero-slider-menu-nav-bar', MenuNavModuleCss.Bar),\n    style: {\n      width: \"\".concat(100 / totalSlides, \"%\"),\n      transform: \"translate3d(\".concat(activeSlide - 1, \"00%, 0, 0)\")\n    }\n  })));\n}\nMenuNav.displayName = 'hero-slider/menu-nav';\nexport { MenuNav };","map":{"version":3,"mappings":"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","names":["MenuNav","props","color","activeColor","position","bottom","left","transform","justifyContent","componentMobileThreshold","mobileThreshold","isNullAfterThreshold","extraButton","isExtraButtonRight","useLayout","width","state","useManager","slides","totalSlides","useController","activeSlide","changeSlide","Number","React","Object","renderButtons","onClickHandler","slideNumber","Array","from","values","map","index","label","number","description","key","className","composeCssClasses","MenuNavModuleCss","Button","Active","useIf","onClick","Description","Square","Text","CSSVariables","Wrapper","style","Extra","order","ExtraButton","borderLeft","undefined","borderRight","Container","Bar","displayName"],"sources":["C:\\Users\\Ibrahim\\Desktop\\Glob_az-CargoShippingCompany-main\\node_modules\\hero-slider\\src\\components\\MenuNav\\index.tsx"],"sourcesContent":["import React from 'react';\nimport MenuNavModuleCss from './index.module.css';\nimport { Nav, NavProps } from '../Nav';\nimport { useLayout } from '../../modules/Layout';\nimport { useManager } from '../../modules/Manager';\nimport { useController } from '../../modules/Controller';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\n\n/**\n * `MenuNav` component props.\n */\nexport interface MenuNavProps extends NavProps {\n  /**\n   * Determines how the browser distributes space between and around nav items along the component.\n   */\n  justifyContent?: React.CSSProperties['justifyContent'];\n  /**\n   * Given the nature of this component, it doesn't work well with devices of relatively small width.\n   * The mobile threshold is the point in which this component turns into a basic `Nav` component or `null`.\n   */\n  mobileThreshold?: number;\n  /**\n   * Determines if the nav should render `null` or a basic `Nav` component after the threshold is reached.\n   * @default false\n   */\n  isNullAfterThreshold?: boolean;\n  /**\n   * An extra button rendered among the nav items in case the developer may want any extra functionality in the component.\n   */\n  extraButton?: React.ReactNode;\n  /**\n   * Renders the button to the right side of the nav if true, otherwise it will appear at the left side.\n   * @default true\n   */\n  isExtraButtonRight?: boolean;\n}\n\nexport function MenuNav(props: MenuNavProps) {\n  const {\n    color,\n    activeColor,\n    position = {\n      bottom: '0',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    justifyContent = 'center',\n    mobileThreshold: componentMobileThreshold,\n    isNullAfterThreshold,\n    extraButton,\n    isExtraButtonRight = true\n  } = props;\n\n  const {\n    state: { width },\n    mobileThreshold\n  } = useLayout();\n\n  const {\n    state: { slides, totalSlides }\n  } = useManager();\n\n  const {\n    state: { activeSlide },\n    changeSlide\n  } = useController();\n\n  if (Number(width) <= (componentMobileThreshold ?? mobileThreshold)) {\n    if (isNullAfterThreshold) return null;\n    return <Nav {...props} />;\n  }\n\n  function renderButtons() {\n    if (!totalSlides) return [];\n\n    const onClickHandler = (slideNumber: number) => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n\n    return Array.from(slides.values()).map(({ label, number }, index) => {\n      const description = label;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n        <li\n          key={index}\n          className={composeCssClasses(\n            'hero-slider-menu-nav-button',\n            MenuNavModuleCss.Button,\n            {\n              className: MenuNavModuleCss.Active,\n              useIf: activeSlide === number\n            }\n          )}\n          onClick={() => onClickHandler(number)}\n        >\n          <div\n            className={composeCssClasses(\n              'hero-slider-menu-nav-button-description',\n              MenuNavModuleCss.Description\n            )}\n          >\n            <div\n              className={composeCssClasses(\n                'hero-slider-menu-nav-button-number',\n                MenuNavModuleCss.Number\n              )}\n            >\n              {number}\n              <span\n                className={composeCssClasses(\n                  'hero-slider-menu-nav-button-square',\n                  MenuNavModuleCss.Square\n                )}\n              />\n            </div>\n            <div\n              className={composeCssClasses(\n                'hero-slider-menu-nav-button-text',\n                MenuNavModuleCss.Text\n              )}\n            >\n              {description}\n            </div>\n          </div>\n        </li>\n      );\n    });\n  }\n\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-active-color': activeColor\n  };\n\n  return (\n    <div\n      className={composeCssClasses(\n        'hero-slider-menu-nav-wrapper',\n        MenuNavModuleCss.Wrapper\n      )}\n      style={{\n        ...position,\n        ...CSSVariables,\n        justifyContent\n      }}\n    >\n      {extraButton && (\n        <div\n          className={composeCssClasses(\n            'hero-slider-menu-nav-extra',\n            MenuNavModuleCss.Extra\n          )}\n          style={{\n            order: isExtraButtonRight ? 1 : 0\n          }}\n        >\n          <span\n            className={composeCssClasses(\n              'hero-slider-menu-nav-extra-button',\n              MenuNavModuleCss.ExtraButton\n            )}\n            style={{\n              borderLeft: isExtraButtonRight\n                ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))'\n                : undefined,\n              borderRight: !isExtraButtonRight\n                ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))'\n                : undefined\n            }}\n          >\n            {extraButton}\n          </span>\n        </div>\n      )}\n      <ul\n        className={composeCssClasses(\n          'hero-slider-menu-nav-container',\n          MenuNavModuleCss.Container\n        )}\n      >\n        {renderButtons()}\n        <span\n          className={composeCssClasses(\n            'hero-slider-menu-nav-bar',\n            MenuNavModuleCss.Bar\n          )}\n          style={{\n            width: `${100 / totalSlides}%`,\n            transform: `translate3d(${activeSlide - 1}00%, 0, 0)`\n          }}\n        />\n      </ul>\n    </div>\n  );\n}\n\n(MenuNav as React.FunctionComponent).displayName = 'hero-slider/menu-nav';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}