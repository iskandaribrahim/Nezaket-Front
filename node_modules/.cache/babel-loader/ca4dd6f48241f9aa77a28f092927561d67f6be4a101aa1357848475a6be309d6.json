{"ast":null,"code":"import _slicedToArray from \"C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default from 'react';\nvar mobileThreshold = 1024;\nvar LayoutStateContext = React__default.createContext(undefined);\nfunction layoutReducer(state, action) {\n  var _a, _b;\n  switch (action.type) {\n    case 'update-slider-dimensions':\n      {\n        return {\n          slider: state.slider,\n          width: (_a = state.slider.current) === null || _a === void 0 ? void 0 : _a.clientWidth,\n          height: (_b = state.slider.current) === null || _b === void 0 ? void 0 : _b.clientHeight\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unhandled action: [\".concat(JSON.stringify(action, null, 2), \"]\"));\n      }\n  }\n}\nfunction LayoutProvider(_ref) {\n  var children = _ref.children;\n  var _React__default$useRe = React__default.useReducer(layoutReducer, {\n      slider: React__default.useRef(null),\n      width: undefined,\n      height: undefined\n    }),\n    _React__default$useRe2 = _slicedToArray(_React__default$useRe, 2),\n    state = _React__default$useRe2[0],\n    dispatch = _React__default$useRe2[1];\n  /**\n   * After mounting, similar to `componentDidMount`, set up the window event listeners and update dimensions.\n   */\n  React__default.useEffect(function () {\n    function updateSliderDimensions() {\n      if (state.slider.current) dispatch({\n        type: 'update-slider-dimensions'\n      });\n    }\n    updateSliderDimensions();\n    window.addEventListener('resize', updateSliderDimensions);\n    /**\n     * Clearing event listener to avoid memory leaks.\n     */\n    return function () {\n      window.removeEventListener('resize', updateSliderDimensions);\n    };\n  }, [state.slider.current]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  var value = {\n    state: state,\n    mobileThreshold: mobileThreshold\n  };\n  return React__default.createElement(LayoutStateContext.Provider, {\n    value: value\n  }, children);\n}\nfunction useLayout() {\n  var context = React__default.useContext(LayoutStateContext);\n  if (context === undefined) {\n    throw new Error('useLayout must be used within a LayoutProvider');\n  }\n  return context;\n}\nexport { LayoutProvider, useLayout };","map":{"version":3,"mappings":";;AAGA,IAAMA,eAAe,GAAG,IAAI;AAW5B,IAAMC,kBAAkB,GAAGC,cAAK,CAACC,aAAa,CAE5CC,SAAS,CAAC;AAEZ,SAASC,aAAa,CAACC,KAAY,EAAEC,MAAc;;EACjD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,0BAA0B;MAAE;QAC/B,OAAO;UACLC,MAAM,EAAEH,KAAK,CAACG,MAAM;UACpBC,KAAK,EAAE,WAAK,CAACD,MAAM,CAACE,OAAO,0CAAEC,WAAsC;UACnEC,MAAM,EAAE,WAAK,CAACJ,MAAM,CAACE,OAAO,0CAAEG;SAC/B;MACF;IACD;MAAS;QACP,MAAM,IAAIC,KAAK,8BAAuBC,IAAI,CAACC,SAAS,CAACV,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,OAAI;MAC1E;EAAA;AAEL;AAEA,SAASW,cAAc,OAAsC;EAAA,IAAnCC,QAAQ,QAARA,QAAQ;EAChC,4BAA0BjB,cAAK,CAACkB,UAAU,CAACf,aAAa,EAAE;MACxDI,MAAM,EAAEP,cAAK,CAACmB,MAAM,CAAc,IAAI,CAAC;MACvCX,KAAK,EAAEN,SAAS;MAChBS,MAAM,EAAET;IACA,EAAC;IAAA;IAJJE,KAAK;IAAEgB,QAAQ;EAMtB;;AAEG;EACHpB,cAAK,CAACqB,SAAS,CAAC,YAAK;IACnB,SAASC,sBAAsB;MAC7B,IAAIlB,KAAK,CAACG,MAAM,CAACE,OAAO,EAAEW,QAAQ,CAAC;QAAEd,IAAI,EAAE;MAA0B,CAAE,CAAC;;IAG1EgB,sBAAsB,EAAE;IAExBC,MAAM,CAACC,gBAAgB,CACrB,QAAQ,EACRF,sBAA4D,CAC7D;IACD;;AAEG;IACH,OAAO,YAAK;MACVC,MAAM,CAACE,mBAAmB,CACxB,QAAQ,EACRH,sBAA4D,CAC7D;IACH,CAAC;GACF,EAAE,CAAClB,KAAK,CAACG,MAAM,CAACE,OAAO,CAAC,CAAC;;;EAI1B,IAAMiB,KAAK,GAAG;IAAEtB,KAAK,EAALA,KAAK;IAAEN,eAAe,EAAfA;EAAe,CAAE;EAExC,OACEE,6BAACD,kBAAkB,CAAC4B,QAAQ;IAACD,KAAK,EAAEA;EAAK,GACtCT,QAAQ,CACmB;AAElC;AAEA,SAASW,SAAS;EAChB,IAAMC,OAAO,GAAG7B,cAAK,CAAC8B,UAAU,CAAC/B,kBAAkB,CAAC;EAEpD,IAAI8B,OAAO,KAAK3B,SAAS,EAAE;IACzB,MAAM,IAAIW,KAAK,CAAC,gDAAgD,CAAC;EAClE;EAED,OAAOgB,OAAO;AAChB","names":["mobileThreshold","LayoutStateContext","React","createContext","undefined","layoutReducer","state","action","type","slider","width","current","clientWidth","height","clientHeight","Error","JSON","stringify","LayoutProvider","children","useReducer","useRef","dispatch","useEffect","updateSliderDimensions","window","addEventListener","removeEventListener","value","Provider","useLayout","context","useContext"],"sources":["C:\\Users\\Ibrahim\\Desktop\\Glob_az-CargoShippingCompany-main\\node_modules\\hero-slider\\src\\modules\\Layout.tsx"],"sourcesContent":["import React from 'react';\nimport type CSS from 'csstype';\n\nconst mobileThreshold = 1024;\n\ntype Action = {\n  type: 'update-slider-dimensions';\n};\ntype State = {\n  slider: React.RefObject<HTMLDivElement>;\n  width?: CSS.Properties['width'];\n  height?: CSS.Properties['height'];\n};\n\nconst LayoutStateContext = React.createContext<\n  { state: State; mobileThreshold: number } | undefined\n>(undefined);\n\nfunction layoutReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update-slider-dimensions': {\n      return {\n        slider: state.slider,\n        width: state.slider.current?.clientWidth as CSS.Properties['width'],\n        height: state.slider.current?.clientHeight as CSS.Properties['height']\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction LayoutProvider({ children }: React.PropsWithChildren) {\n  const [state, dispatch] = React.useReducer(layoutReducer, {\n    slider: React.useRef<HTMLElement>(null),\n    width: undefined,\n    height: undefined\n  } as State);\n\n  /**\n   * After mounting, similar to `componentDidMount`, set up the window event listeners and update dimensions.\n   */\n  React.useEffect(() => {\n    function updateSliderDimensions() {\n      if (state.slider.current) dispatch({ type: 'update-slider-dimensions' });\n    }\n\n    updateSliderDimensions();\n\n    window.addEventListener(\n      'resize',\n      updateSliderDimensions as EventListenerOrEventListenerObject\n    );\n    /**\n     * Clearing event listener to avoid memory leaks.\n     */\n    return () => {\n      window.removeEventListener(\n        'resize',\n        updateSliderDimensions as EventListenerOrEventListenerObject\n      );\n    };\n  }, [state.slider.current]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, mobileThreshold };\n\n  return (\n    <LayoutStateContext.Provider value={value}>\n      {children}\n    </LayoutStateContext.Provider>\n  );\n}\n\nfunction useLayout() {\n  const context = React.useContext(LayoutStateContext);\n\n  if (context === undefined) {\n    throw new Error('useLayout must be used within a LayoutProvider');\n  }\n\n  return context;\n}\n\nexport { LayoutProvider, useLayout };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}