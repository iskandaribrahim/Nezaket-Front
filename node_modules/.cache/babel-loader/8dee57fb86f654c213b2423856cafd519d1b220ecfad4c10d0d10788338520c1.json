{"ast":null,"code":"import _slicedToArray from \"C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default from 'react';\n\n/**\n * Detecs if on a mobile device.\n */\nfunction isMobile() {\n  // But first, detect if running on the browser in case of SSR:\n  var isBrowser = typeof window !== 'undefined';\n  if (isBrowser) {\n    if (navigator && /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent)) return true;else return false;\n  }\n  return false;\n}\nvar defaultProps = {\n  isMobile: isMobile()\n};\nvar ManagerStateContext = React__default.createContext(undefined);\nfunction managerReducer(state, action) {\n  switch (action.type) {\n    case 'update-is-mobile':\n      {\n        return Object.assign(Object.assign({}, state), {\n          isMobile: state.isMobile\n        });\n      }\n    case 'register-slide':\n      {\n        var slides = state.slides;\n        slides.set(action.payload.ref, {\n          ref: action.payload.ref,\n          number: slides.size + 1,\n          label: action.payload.label\n        });\n        return {\n          isMobile: state.isMobile,\n          slides: slides,\n          totalSlides: slides.size\n        };\n      }\n    case 'remove-slide':\n      {\n        var _slides = state.slides;\n        _slides.delete(action.payload);\n        return {\n          isMobile: state.isMobile,\n          slides: _slides,\n          totalSlides: _slides.size\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unhandled action: [\".concat(JSON.stringify(action, null, 2), \"]\"));\n      }\n  }\n}\nfunction ManagerProvider(_ref) {\n  var children = _ref.children,\n    manager = _ref.manager;\n  var _a;\n  var _React__default$useRe = React__default.useReducer(managerReducer, {\n      isMobile: (_a = manager === null || manager === void 0 ? void 0 : manager.isMobile) !== null && _a !== void 0 ? _a : defaultProps.isMobile,\n      slides: new Map(),\n      totalSlides: 0\n    }),\n    _React__default$useRe2 = _slicedToArray(_React__default$useRe, 2),\n    state = _React__default$useRe2[0],\n    dispatch = _React__default$useRe2[1];\n  /**\n   * Finds a Slide by its React `ref`.\n   */\n  var getSlide = function getSlide(ref) {\n    return state.slides.get(ref);\n  };\n  /**\n   * Registers a rendered Slide.\n   */\n  var registerSlide = function registerSlide(ref, label) {\n    dispatch({\n      type: 'register-slide',\n      payload: {\n        ref: ref,\n        label: label\n      }\n    });\n  };\n  /**\n   * Removes a Slide.\n   */\n  var removeSlide = function removeSlide(ref) {\n    dispatch({\n      type: 'remove-slide',\n      payload: ref\n    });\n  };\n  /**\n   * If `manager.isMobile` prop changes, update the current state.\n   */\n  React__default.useEffect(function () {\n    if (typeof (manager === null || manager === void 0 ? void 0 : manager.isMobile) === 'boolean') dispatch({\n      type: 'update-is-mobile',\n      payload: manager === null || manager === void 0 ? void 0 : manager.isMobile\n    });\n  }, [manager === null || manager === void 0 ? void 0 : manager.isMobile]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  var value = {\n    state: state,\n    getSlide: getSlide,\n    registerSlide: registerSlide,\n    removeSlide: removeSlide\n  };\n  return React__default.createElement(ManagerStateContext.Provider, {\n    value: value\n  }, children);\n}\nfunction useManager() {\n  var context = React__default.useContext(ManagerStateContext);\n  if (context === undefined) {\n    throw new Error('useManager must be used within a ManagerProvider');\n  }\n  return context;\n}\nexport { ManagerProvider, useManager };","map":{"version":3,"mappings":"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","names":["isMobile","isBrowser","window","navigator","test","userAgentData","userAgent","defaultProps","ManagerStateContext","React","createContext","undefined","managerReducer","state","action","type","slides","set","payload","ref","number","size","label","totalSlides","delete","Error","JSON","stringify","ManagerProvider","children","manager","useReducer","Map","dispatch","getSlide","get","registerSlide","removeSlide","useEffect","value","Provider","useManager","context","useContext"],"sources":["C:\\Users\\Ibrahim\\Desktop\\Glob_az-CargoShippingCompany-main\\node_modules\\hero-slider\\src\\modules\\Manager.tsx"],"sourcesContent":["import React from 'react';\n\ntype Slide = {\n  ref: React.RefObject<HTMLElement>;\n  number: number;\n  label?: string;\n};\n\nexport interface ManagerProps {\n  /**\n   * Determines if on a mobile device. If true, the control buttons at the sides of the slider won't render.\n   * @default /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent)\n   */\n  isMobile?: boolean;\n}\n\ninterface GetSlide {\n  (ref: Slide['ref']): Slide | undefined;\n}\n\ninterface RegisterSlide {\n  (ref: Slide['ref'], label?: string): void;\n}\n\ninterface RemoveSlide {\n  (ref: Slide['ref']): void;\n}\n\ntype Action =\n  | {\n      type: 'update-is-mobile';\n      payload: boolean;\n    }\n  | {\n      type: 'register-slide';\n      payload: Pick<Slide, 'ref' | 'label'>;\n    }\n  | {\n      type: 'remove-slide';\n      payload: Slide['ref'];\n    };\ninterface State extends Required<ManagerProps> {\n  slides: Map<Slide['ref'], Slide>;\n  totalSlides: number;\n}\ntype ProviderProps = React.PropsWithChildren<{ manager?: ManagerProps }>;\n\n/**\n * Detecs if on a mobile device.\n */\nfunction isMobile(): boolean {\n  // But first, detect if running on the browser in case of SSR:\n  const isBrowser = typeof window !== 'undefined';\n\n  if (isBrowser) {\n    if (\n      navigator &&\n      /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent)\n    )\n      return true;\n    else return false;\n  }\n\n  return false;\n}\n\nconst defaultProps: Pick<State, keyof ManagerProps> = {\n  isMobile: isMobile()\n};\n\nconst ManagerStateContext = React.createContext<\n  | {\n      state: State;\n      getSlide: GetSlide;\n      registerSlide: RegisterSlide;\n      removeSlide: RemoveSlide;\n    }\n  | undefined\n>(undefined);\n\nfunction managerReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update-is-mobile': {\n      return { ...state, isMobile: state.isMobile };\n    }\n    case 'register-slide': {\n      const { slides } = state;\n      slides.set(action.payload.ref, {\n        ref: action.payload.ref,\n        number: slides.size + 1,\n        label: action.payload.label\n      });\n      return { isMobile: state.isMobile, slides, totalSlides: slides.size };\n    }\n    case 'remove-slide': {\n      const { slides } = state;\n      slides.delete(action.payload);\n      return { isMobile: state.isMobile, slides, totalSlides: slides.size };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction ManagerProvider({ children, manager }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(managerReducer, {\n    isMobile: manager?.isMobile ?? defaultProps.isMobile,\n    slides: new Map(),\n    totalSlides: 0\n  } as State);\n\n  /**\n   * Finds a Slide by its React `ref`.\n   */\n  const getSlide: GetSlide = (ref) => {\n    return state.slides.get(ref);\n  };\n\n  /**\n   * Registers a rendered Slide.\n   */\n  const registerSlide: RegisterSlide = (ref, label) => {\n    dispatch({\n      type: 'register-slide',\n      payload: {\n        ref,\n        label\n      }\n    });\n  };\n\n  /**\n   * Removes a Slide.\n   */\n  const removeSlide: RemoveSlide = (ref) => {\n    dispatch({\n      type: 'remove-slide',\n      payload: ref\n    });\n  };\n\n  /**\n   * If `manager.isMobile` prop changes, update the current state.\n   */\n  React.useEffect(() => {\n    if (typeof manager?.isMobile === 'boolean')\n      dispatch({\n        type: 'update-is-mobile',\n        payload: manager?.isMobile\n      });\n  }, [manager?.isMobile]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, getSlide, registerSlide, removeSlide };\n\n  return (\n    <ManagerStateContext.Provider value={value}>\n      {children}\n    </ManagerStateContext.Provider>\n  );\n}\n\nfunction useManager() {\n  const context = React.useContext(ManagerStateContext);\n\n  if (context === undefined) {\n    throw new Error('useManager must be used within a ManagerProvider');\n  }\n\n  return context;\n}\n\nexport { ManagerProvider, useManager };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}