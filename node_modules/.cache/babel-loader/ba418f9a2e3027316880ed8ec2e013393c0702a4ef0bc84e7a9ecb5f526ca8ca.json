{"ast":null,"code":"import _slicedToArray from \"C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default from 'react';\nimport { useController } from './Controller.js';\n\n/**\n * `AccessabilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nvar AccessabilityOrientation;\n(function (AccessabilityOrientation) {\n  AccessabilityOrientation[\"VERTICAL\"] = \"vertical\";\n  AccessabilityOrientation[\"HORIZONTAL\"] = \"horizontal\";\n})(AccessabilityOrientation || (AccessabilityOrientation = {}));\nvar defaultProps = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: AccessabilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\nvar AccessabilityStateContext = React__default.createContext(undefined);\nfunction accessabilityReducer(state, action) {\n  switch (action.type) {\n    case 'start-motion':\n      {\n        return {\n          initialX: action.payload.x,\n          initialY: action.payload.y,\n          currentX: undefined,\n          currentY: undefined\n        };\n      }\n    case 'update-motion':\n      {\n        return {\n          initialX: state.initialX,\n          initialY: state.initialY,\n          currentX: action.payload.x,\n          currentY: action.payload.y\n        };\n      }\n    case 'end-motion':\n      {\n        return {\n          initialX: undefined,\n          initialY: undefined,\n          currentX: undefined,\n          currentY: undefined\n        };\n      }\n    default:\n      {\n        throw new Error(\"Unhandled action: [\".concat(JSON.stringify(action, null, 2), \"]\"));\n      }\n  }\n}\nfunction AccessabilityProvider(_ref) {\n  var children = _ref.children,\n    accessability = _ref.accessability;\n  var _a, _b, _c;\n  var params = {\n    shouldDisplayButtons: (_a = accessability === null || accessability === void 0 ? void 0 : accessability.shouldDisplayButtons) !== null && _a !== void 0 ? _a : defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress: (_b = accessability === null || accessability === void 0 ? void 0 : accessability.shouldSlideOnArrowKeypress) !== null && _b !== void 0 ? _b : defaultProps.shouldSlideOnArrowKeypress,\n    orientation: (accessability === null || accessability === void 0 ? void 0 : accessability.orientation) || defaultProps.orientation,\n    thresholdToSlide: (_c = accessability === null || accessability === void 0 ? void 0 : accessability.thresholdToSlide) !== null && _c !== void 0 ? _c : defaultProps.thresholdToSlide\n  };\n  var _React__default$useRe = React__default.useReducer(accessabilityReducer, {\n      initialX: undefined,\n      initialY: undefined,\n      currentX: undefined,\n      currentY: undefined\n    }),\n    _React__default$useRe2 = _slicedToArray(_React__default$useRe, 2),\n    state = _React__default$useRe2[0],\n    dispatch = _React__default$useRe2[1];\n  var _useController = useController(),\n    goToNextSlide = _useController.goToNextSlide,\n    goToPreviousSlide = _useController.goToPreviousSlide;\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  var onTouchStartHandler = function onTouchStartHandler(event) {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  var onTouchMoveHandler = function onTouchMoveHandler(event) {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  var onTouchEndHandler = function onTouchEndHandler() {\n    var diffX = Number(state.initialX) - Number(state.currentX);\n    var diffY = Number(state.initialY) - Number(state.currentY);\n    var isSlidingHorizontally = Math.abs(diffX) > Math.abs(diffY);\n    var isSliderSetHorizontally = params.orientation === AccessabilityOrientation.HORIZONTAL;\n    var isSliderVertically = params.orientation === AccessabilityOrientation.VERTICAL;\n    if (isSlidingHorizontally && isSliderSetHorizontally && Math.abs(diffX) >= params.thresholdToSlide) {\n      var isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();else goToPreviousSlide();\n    } else if (isSliderVertically && Math.abs(diffY) >= params.thresholdToSlide) {\n      var isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();else goToPreviousSlide();\n    }\n    dispatch({\n      type: 'end-motion'\n    });\n  };\n  var onArrowKeypressHandler = function onArrowKeypressHandler(e) {\n    if (!params.shouldSlideOnArrowKeypress) return;\n    var isHorizontal = params.orientation === AccessabilityOrientation.HORIZONTAL;\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && e.keyCode === 37:\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && e.keyCode === 39:\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && e.keyCode === 38:\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && e.keyCode === 40:\n        goToNextSlide();\n        break;\n    }\n  };\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React__default.useEffect(function () {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return function () {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  var value = {\n    state: state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation,\n    onTouchStartHandler: onTouchStartHandler,\n    onTouchMoveHandler: onTouchMoveHandler,\n    onTouchEndHandler: onTouchEndHandler\n  };\n  return React__default.createElement(AccessabilityStateContext.Provider, {\n    value: value\n  }, children);\n}\nfunction useAccessability() {\n  var context = React__default.useContext(AccessabilityStateContext);\n  if (context === undefined) {\n    throw new Error('useAccessability must be used within a AccessabilityProvider');\n  }\n  return context;\n}\nexport { AccessabilityOrientation, AccessabilityProvider, useAccessability };","map":{"version":3,"mappings":"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","names":["AccessabilityOrientation","defaultProps","shouldDisplayButtons","shouldSlideOnArrowKeypress","orientation","HORIZONTAL","thresholdToSlide","AccessabilityStateContext","React","createContext","undefined","accessabilityReducer","state","action","type","initialX","payload","x","initialY","y","currentX","currentY","Error","JSON","stringify","AccessabilityProvider","children","accessability","params","useReducer","dispatch","useController","goToNextSlide","goToPreviousSlide","onTouchStartHandler","event","touches","clientX","clientY","onTouchMoveHandler","onTouchEndHandler","diffX","Number","diffY","isSlidingHorizontally","Math","abs","isSliderSetHorizontally","isSliderVertically","VERTICAL","isSwipingRight","isSwipingUp","onArrowKeypressHandler","e","isHorizontal","keyCode","useEffect","window","addEventListener","removeEventListener","value","Provider","useAccessability","context","useContext"],"sources":["C:\\Users\\Ibrahim\\Desktop\\Glob_az-CargoShippingCompany-main\\node_modules\\hero-slider\\src\\modules\\Accessability.tsx"],"sourcesContent":["import React from 'react';\nimport { useController } from './Controller';\n\n/**\n * `AccessabilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nexport enum AccessabilityOrientation {\n  VERTICAL = 'vertical',\n  HORIZONTAL = 'horizontal'\n}\n\nexport interface AccessabilityProps {\n  /**\n   * Controls render of the next and previous buttons.\n   * @default true\n   */\n  shouldDisplayButtons?: boolean;\n  /**\n   * When an arrow key is pressed, the active slide will change respectively to the pressed arrow.\n   * The left and down arrows will set the previous slide, and the right and up arrows will set the next slide.\n   * The left and right will only work if the slider is horizontal, and the up and down arrows will only work if the slider is vertical.\n   * @default true\n   */\n  shouldSlideOnArrowKeypress?: boolean;\n  /**\n   * The slider orientation can either set to be `horizontal` or `vertical`.\n   * The orientation sets the slide buttons respective to the orientation (e.g. if vertical, the buttons will be at the top and at the bottom).\n   * Swipe (touch) gestures in mobile devices to change slides will also be configured automatically depending on the orientation (e.g. if horizontal, swiping vertically won't change slides).\n   * @default 'horizontal'\n   */\n  orientation?: `${AccessabilityOrientation}`;\n  /**\n   * Pixel threshold for the Slider to register a swiping command to change slides.\n   * @default 50\n   */\n  thresholdToSlide?: number;\n}\n\ntype Action =\n  | {\n      type: 'start-motion';\n      payload: { x: number; y: number };\n    }\n  | {\n      type: 'update-motion';\n      payload: { x: number; y: number };\n    }\n  | { type: 'end-motion' };\ntype State = {\n  initialX: number | undefined;\n  initialY: number | undefined;\n  currentX: number | undefined;\n  currentY: number | undefined;\n};\ntype ProviderProps = React.PropsWithChildren<{\n  accessability?: AccessabilityProps;\n}>;\n\nconst defaultProps: Required<AccessabilityProps> = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: AccessabilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\n\nconst AccessabilityStateContext = React.createContext<\n  | {\n      state: State;\n      shouldDisplayButtons: boolean;\n      orientation: AccessabilityOrientation;\n      onTouchStartHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchMoveHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchEndHandler: () => void;\n    }\n  | undefined\n>(undefined);\n\nfunction accessabilityReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'start-motion': {\n      return {\n        initialX: action.payload.x,\n        initialY: action.payload.y,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    case 'update-motion': {\n      return {\n        initialX: state.initialX,\n        initialY: state.initialY,\n        currentX: action.payload.x,\n        currentY: action.payload.y\n      };\n    }\n    case 'end-motion': {\n      return {\n        initialX: undefined,\n        initialY: undefined,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction AccessabilityProvider({ children, accessability }: ProviderProps) {\n  const params: Required<AccessabilityProps> = {\n    shouldDisplayButtons:\n      accessability?.shouldDisplayButtons ?? defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress:\n      accessability?.shouldSlideOnArrowKeypress ??\n      defaultProps.shouldSlideOnArrowKeypress,\n    orientation: accessability?.orientation || defaultProps.orientation,\n    thresholdToSlide:\n      accessability?.thresholdToSlide ?? defaultProps.thresholdToSlide\n  };\n\n  const [state, dispatch] = React.useReducer(accessabilityReducer, {\n    initialX: undefined,\n    initialY: undefined,\n    currentX: undefined,\n    currentY: undefined\n  } as State);\n\n  const { goToNextSlide, goToPreviousSlide } = useController();\n\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  const onTouchStartHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  const onTouchMoveHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  const onTouchEndHandler = () => {\n    const diffX = Number(state.initialX) - Number(state.currentX);\n    const diffY = Number(state.initialY) - Number(state.currentY);\n\n    const isSlidingHorizontally: boolean = Math.abs(diffX) > Math.abs(diffY);\n    const isSliderSetHorizontally: boolean =\n      params.orientation === AccessabilityOrientation.HORIZONTAL;\n    const isSliderVertically: boolean =\n      params.orientation === AccessabilityOrientation.VERTICAL;\n\n    if (\n      isSlidingHorizontally &&\n      isSliderSetHorizontally &&\n      Math.abs(diffX) >= params.thresholdToSlide\n    ) {\n      const isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();\n      else goToPreviousSlide();\n    } else if (\n      isSliderVertically &&\n      Math.abs(diffY) >= params.thresholdToSlide\n    ) {\n      const isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();\n      else goToPreviousSlide();\n    }\n\n    dispatch({ type: 'end-motion' });\n  };\n\n  const onArrowKeypressHandler = (e: KeyboardEvent): void => {\n    if (!params.shouldSlideOnArrowKeypress) return;\n\n    const isHorizontal =\n      params.orientation === AccessabilityOrientation.HORIZONTAL;\n\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && e.keyCode === 37:\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && e.keyCode === 39:\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && e.keyCode === 38:\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && e.keyCode === 40:\n        goToNextSlide();\n        break;\n      default: // Do nothing.\n    }\n  };\n\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React.useEffect(() => {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation as AccessabilityOrientation,\n    onTouchStartHandler,\n    onTouchMoveHandler,\n    onTouchEndHandler\n  };\n\n  return (\n    <AccessabilityStateContext.Provider value={value}>\n      {children}\n    </AccessabilityStateContext.Provider>\n  );\n}\n\nfunction useAccessability() {\n  const context = React.useContext(AccessabilityStateContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useAccessability must be used within a AccessabilityProvider'\n    );\n  }\n\n  return context;\n}\n\nexport { AccessabilityProvider, useAccessability };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}