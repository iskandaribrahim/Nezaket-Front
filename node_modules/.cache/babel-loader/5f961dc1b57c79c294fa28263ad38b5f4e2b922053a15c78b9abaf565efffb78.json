{"ast":null,"code":"export function Calculate(length,width,height,physicalWeight,unitWeight,country){var lastResult=0;var volumetricWeight=0;// kg\nif(unitWeight==='kg'&&country==='Türkiyə'){volumetricWeight=length*width*height/6000;if(physicalWeight<=0.1&&physicalWeight>0.001){lastResult=0.7;}if(physicalWeight<=0.25&&physicalWeight>0.1){lastResult=1.95;}if(physicalWeight<=0.5&&physicalWeight>0.25){lastResult=2.95;}if(physicalWeight<=0.75&&physicalWeight>0.5){lastResult=3.5;}if(physicalWeight<=1&&physicalWeight>0.75){lastResult=3.9;}if(physicalWeight>1){lastResult=3.5;}}// g\nif(unitWeight==='g'&&country==='Türkiyə'){volumetricWeight=length*width*height/6;if(physicalWeight<=100&&physicalWeight>1){lastResult=0.7;}if(physicalWeight<=250&&physicalWeight>100){lastResult=1.95;}if(physicalWeight<=500&&physicalWeight>250){lastResult=2.95;}if(physicalWeight<=750&&physicalWeight>500){lastResult=3.5;}if(physicalWeight<=1000&&physicalWeight>750){lastResult=3.9;}if(physicalWeight>1000){lastResult=3.5;}}if(length>=60&&width>=60||length>=60&&height>=60||width>=60&&height>=60){if(volumetricWeight>physicalWeight){lastResult=volumetricWeight/100;}else{lastResult=physicalWeight/100;}}return lastResult;}","map":{"version":3,"names":["Calculate","length","width","height","physicalWeight","unitWeight","country","lastResult","volumetricWeight"],"sources":["C:/Users/Ibrahim/Desktop/Glob_az-CargoShippingCompany-main/src/pages/HomePage/components/Calculator/Calculate.ts"],"sourcesContent":["export function Calculate(\n  length: number,\n  width: number,\n  height: number,\n  physicalWeight: number,\n  unitWeight: string,\n  country: string,\n) {\n  let lastResult = 0;\n  let volumetricWeight = 0;\n  // kg\n  if (unitWeight === 'kg' && country === 'Türkiyə') {\n    volumetricWeight = (length * width * height) / 6000;\n\n    if (physicalWeight <= 0.1 && physicalWeight > 0.001) {\n      lastResult = 0.7;\n    }\n    if (physicalWeight <= 0.25 && physicalWeight > 0.1) {\n      lastResult = 1.95;\n    }\n\n    if (physicalWeight <= 0.5 && physicalWeight > 0.25) {\n      lastResult = 2.95;\n    }\n\n    if (physicalWeight <= 0.75 && physicalWeight > 0.5) {\n      lastResult = 3.5;\n    }\n    if (physicalWeight <= 1 && physicalWeight > 0.75) {\n      lastResult = 3.9;\n    }\n\n    if (physicalWeight > 1) {\n      lastResult = 3.5;\n    }\n  }\n  // g\n  if (unitWeight === 'g' && country === 'Türkiyə') {\n    volumetricWeight = (length * width * height) / 6;\n\n    if (physicalWeight <= 100 && physicalWeight > 1) {\n      lastResult = 0.7;\n    }\n\n    if (physicalWeight <= 250 && physicalWeight > 100) {\n      lastResult = 1.95;\n    }\n\n    if (physicalWeight <= 500 && physicalWeight > 250) {\n      lastResult = 2.95;\n    }\n\n    if (physicalWeight <= 750 && physicalWeight > 500) {\n      lastResult = 3.5;\n    }\n    if (physicalWeight <= 1000 && physicalWeight > 750) {\n      lastResult = 3.9;\n    }\n\n    if (physicalWeight > 1000) {\n      lastResult = 3.5;\n    }\n  }\n\n  if ((length >= 60 && width >= 60) || (length >= 60 && height >= 60) || (width >= 60 && height >= 60)) {\n    if (volumetricWeight > physicalWeight) {\n      lastResult = volumetricWeight / 100;\n    } else {\n      lastResult = physicalWeight / 100;\n    }\n  }\n  return lastResult;\n}\n"],"mappings":"AAAA,MAAO,SAASA,UAAS,CACvBC,MAAc,CACdC,KAAa,CACbC,MAAc,CACdC,cAAsB,CACtBC,UAAkB,CAClBC,OAAe,CACf,CACA,GAAIC,WAAU,CAAG,CAAC,CAClB,GAAIC,iBAAgB,CAAG,CAAC,CACxB;AACA,GAAIH,UAAU,GAAK,IAAI,EAAIC,OAAO,GAAK,SAAS,CAAE,CAChDE,gBAAgB,CAAIP,MAAM,CAAGC,KAAK,CAAGC,MAAM,CAAI,IAAI,CAEnD,GAAIC,cAAc,EAAI,GAAG,EAAIA,cAAc,CAAG,KAAK,CAAE,CACnDG,UAAU,CAAG,GAAG,CAClB,CACA,GAAIH,cAAc,EAAI,IAAI,EAAIA,cAAc,CAAG,GAAG,CAAE,CAClDG,UAAU,CAAG,IAAI,CACnB,CAEA,GAAIH,cAAc,EAAI,GAAG,EAAIA,cAAc,CAAG,IAAI,CAAE,CAClDG,UAAU,CAAG,IAAI,CACnB,CAEA,GAAIH,cAAc,EAAI,IAAI,EAAIA,cAAc,CAAG,GAAG,CAAE,CAClDG,UAAU,CAAG,GAAG,CAClB,CACA,GAAIH,cAAc,EAAI,CAAC,EAAIA,cAAc,CAAG,IAAI,CAAE,CAChDG,UAAU,CAAG,GAAG,CAClB,CAEA,GAAIH,cAAc,CAAG,CAAC,CAAE,CACtBG,UAAU,CAAG,GAAG,CAClB,CACF,CACA;AACA,GAAIF,UAAU,GAAK,GAAG,EAAIC,OAAO,GAAK,SAAS,CAAE,CAC/CE,gBAAgB,CAAIP,MAAM,CAAGC,KAAK,CAAGC,MAAM,CAAI,CAAC,CAEhD,GAAIC,cAAc,EAAI,GAAG,EAAIA,cAAc,CAAG,CAAC,CAAE,CAC/CG,UAAU,CAAG,GAAG,CAClB,CAEA,GAAIH,cAAc,EAAI,GAAG,EAAIA,cAAc,CAAG,GAAG,CAAE,CACjDG,UAAU,CAAG,IAAI,CACnB,CAEA,GAAIH,cAAc,EAAI,GAAG,EAAIA,cAAc,CAAG,GAAG,CAAE,CACjDG,UAAU,CAAG,IAAI,CACnB,CAEA,GAAIH,cAAc,EAAI,GAAG,EAAIA,cAAc,CAAG,GAAG,CAAE,CACjDG,UAAU,CAAG,GAAG,CAClB,CACA,GAAIH,cAAc,EAAI,IAAI,EAAIA,cAAc,CAAG,GAAG,CAAE,CAClDG,UAAU,CAAG,GAAG,CAClB,CAEA,GAAIH,cAAc,CAAG,IAAI,CAAE,CACzBG,UAAU,CAAG,GAAG,CAClB,CACF,CAEA,GAAKN,MAAM,EAAI,EAAE,EAAIC,KAAK,EAAI,EAAE,EAAMD,MAAM,EAAI,EAAE,EAAIE,MAAM,EAAI,EAAG,EAAKD,KAAK,EAAI,EAAE,EAAIC,MAAM,EAAI,EAAG,CAAE,CACpG,GAAIK,gBAAgB,CAAGJ,cAAc,CAAE,CACrCG,UAAU,CAAGC,gBAAgB,CAAG,GAAG,CACrC,CAAC,IAAM,CACLD,UAAU,CAAGH,cAAc,CAAG,GAAG,CACnC,CACF,CACA,MAAOG,WAAU,CACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}